name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # This "code-quality" job runs a series of fast, fail-fast checks to ensure the codebase meets baseline quality standards before running heavier jobs like build or test.
  # It validates Renovate config, enforces dependency constraints, lints, typechecks, and checks formatting.
  # The point is to catch common issues (bad dependencies, lint errors, type errors, formatting problems) early and fail the CI quickly if any are present.
  code-quality:
    name: Code Quality Checks
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate Renovate config
        run: make renovate-validate
      - name: Enable Corepack
        run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - name: Install dependencies
        run: make install
      - name: Enforce Dependency Constraints
        run: make constraints
      - name: Lint Source Code
        run: make lint
      - name: Type Check
        run: make typecheck
      - name: Check Code Formatting
        run: make format-check

  # This build-artifacts step ensures that the codebase can be built successfully after passing code quality checks.
  # It verifies that all workspaces compile without errors, catching issues that lint/typecheck might miss (e.g., build-time errors, missing files).
  # This step is important for CI pipelines that may later add deployment, packaging, or artifact upload steps.
  build-artifacts:
    name: Build Artifacts
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack
        run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - name: Install dependencies
        run: make install
      - name: Build All Workspaces
        run: make build

  # This "test" job runs the project's tests and collects code coverage information.
  # Its main purposes are:
  #   - To ensure that all tests pass on CI, preventing regressions.
  #   - To generate code coverage reports for both the backend and types packages.
  #   - To upload coverage reports as workflow artifacts for later inspection.
  #   - To post coverage summaries as comments on pull requests (using davelosert/vitest-coverage-report-action),
  #     so reviewers can see how a PR affects test coverage.
  # This step is essential for maintaining code quality, tracking test coverage, and providing feedback to contributors.
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [code-quality]
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack
        run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - name: Install dependencies
        run: make install
      - name: Run tests (with coverage)
        run: make coverage
      - name: Report Backend Coverage
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          name: Backend
          working-directory: services/backend
          file-coverage-mode: changes
      - name: Report Types Coverage
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          name: Types
          working-directory: packages/types
          file-coverage-mode: changes
      - name: Upload backend coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-backend
          path: services/backend/coverage
          if-no-files-found: warn
      - name: Upload types coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-types
          path: packages/types/coverage
          if-no-files-found: warn
